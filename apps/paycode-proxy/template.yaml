AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS SAM application featuring Lambda functions with API Gateway, Cognito user pool, and environment-dependent secrets.

#! avoiding the use of secrets manager or the parameter store as the lambda is stuck in a VPC and didn't find the private link or NGW use that worthy when you can implement a very light internal decryption mechanism during production (can be made as part of the paycode/lib). Note that, anyone with access to your lambda and logs can technically log these values negating their security. While this is still more secure, given your use case, I rather use a simple encrypted env var which is already encrypted by the lambda service at rest.

Globals:
  Function:
    Runtime: nodejs20.x
    Handler: index.handler
    Timeout: 29
    Environment:
      Variables:
        ##
        #*Start __INCLUDE by scripts/build-template.js
        ##
        DOMAIN: http://paycode-customer.com/v2
        BRANCH: dev
        RUNTIME_ENV: dev
        LOGGING_LEVEL: debug
        PAYCODE_SERVER_API_KEY_NAME: paycode-server-api-key
        PAYCODE_API_URL: MOCK
        DEPLOYMENT_ENV: dev
        ALLOWED_ORIGINS: '["http://localhost:3000","http://localhost:5173","http://localhost:5174","http://localhost:5175","https://d2wdxwimsxswj0.cloudfront.net"]'
        PREFLIGHT_CACHE_TTL: 3600

        ##
        #*End __INCLUDE by scripts/build-template.js
        ##


Parameters:
  DeploymentEnv:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
    Description: Deployment environment parameter
  IsVpcLog:
    Type: String
    Default: false
    AllowedValues: [true, false]
    Description: Enable VPC flow logs
  PaycodeProxyApiIdParameterStoreHandle:
    Type: String
    Default: '/paycode/paycode-proxy/V1/outputs/apiId'
  PaycodeProxyApiUrlParameterStoreHandle:
    Type: String
    Default: '/paycode/paycode-proxy/V1/outputs/paycodeProxyApiUrl'
  PaycodeVpcId:
    Type: String
    Description: The VPC ID of the peer VPC
  PaycodeAccountId:
    Type: String
    Description: The AWS Account ID of the peer VPC owner
  PaycodePcxRoleArn:
    Type: String
    Description: The ARN of the IAM role for VPC peering connection
  PaycodeVpcCidr:
    Type: String
    Description: CIDR block for the peered VPC
  PaycodeProxyCidrBlock:
    Type: String
    Description: The CIDR block for the VPC
  VpcLogRetention:
    Type: Number
    Default: 7
    #!filled by copilot: looks fine , didn't check!
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: VPC flow logs retention period

Conditions:
  # IsProd: !Equals [ !Ref DeploymentEnv, "prod" ]
  IsDev: !Equals [ !Ref DeploymentEnv, "dev" ]
  IsVpcLog: !Equals [ !Ref IsVpcLog, "true" ]



Resources:
  ############ API Gateway  ############
  Api:
    Type: AWS::Serverless::Api
    Properties:
      #! this is a placeholder b/c it's requirement here -> manage the staging directly
      StageName:  !Ref DeploymentEnv
      DefinitionBody:
        ##
        #*Start __INCLUDE by scripts/build-template.js
        ##
        openapi: 3.0.2
        info:
          title: PayCodeProxy API
          version: 1.0.0
          license:
            name: XXX
            url: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        paths:
          /balance:
            get:
              summary: Get balance for a user
              operationId: getBalance
              parameters:
                - name: username
                  in: query
                  required: true
                  schema:
                    type: string
              responses:
                "200":
                  description: Successful response
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          balance:
                            type: number
                            description: The current balance for the specified username.
              security:
                - CognitoAuthorizer: []
                - api_key: []
                - sigv4: []
              x-amazon-apigateway-request-validators: validateParameters
              x-amazon-apigateway-integration:
                type: aws_proxy
                credentials:
                  Fn::GetAtt:
                    - ApiInvokeLambdaRole
                    - Arn
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BalanceFunction.Arn}/invocations
                passthroughBehavior: when_no_match
            options: &a1
              summary: CORS support
              description: Enable CORS by returning the correct headers
              responses:
                "200":
                  description: CORS response
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                        default: "*"
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                        default: GET, POST, OPTIONS
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                        default: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token
                    Access-Control-Max-Age:
                      schema:
                        type: string
                        default: "3600"
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,\
                        Authorization,X-Api-Key,X-Amz-Security-Token'"
                    responseTemplates:
                      application/json: "{}"
              security: []
          /transactions:
            get:
              summary: Get transactions for a user
              operationId: getTransactions
              parameters:
                - name: username
                  in: query
                  required: true
                  schema:
                    type: string
              responses:
                "200":
                  description: Successful response
                  content:
                    application/json:
                      schema:
                        type: array
                        items: &a2
                          type: object
                          properties:
                            id:
                              type: string
                              description: Unique identifier for the transaction.
                            date:
                              type: string
                              description: Date when the transaction occurred.
                            amount:
                              type: string
                              description: Transaction amount.
                            status:
                              type: string
                              description: Current status of the transaction.
              security:
                - CognitoAuthorizer: []
                - api_key: []
                - sigv4: []
              x-amazon-apigateway-request-validators: validateParameters
              x-amazon-apigateway-integration: &a3
                type: aws_proxy
                credentials:
                  Fn::GetAtt:
                    - ApiInvokeLambdaRole
                    - Arn
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TransactionFunction.Arn}/invocations
                passthroughBehavior: when_no_match
            options: *a1
          /transaction:
            get:
              summary: Get transaction by ID and username
              operationId: getTransactionById
              parameters:
                - name: id
                  in: query
                  required: true
                  schema:
                    type: string
                - name: username
                  in: query
                  required: true
                  schema:
                    type: string
              responses:
                "200":
                  description: Successful response
                  content:
                    application/json:
                      schema: *a2
              security:
                - CognitoAuthorizer: []
                - api_key: []
                - sigv4: []
              x-amazon-apigateway-request-validators: validateParameters
              x-amazon-apigateway-integration: *a3
            options: *a1
          /payment:
            post:
              summary: Post a payment
              operationId: postPayment
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        username:
                          type: string
                          description: The username initiating the payment.
                        amount:
                          type: string
                          description: Amount to be paid.
              responses:
                "202":
                  description: Successful payment
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          id:
                            type: string
                            description: Unique identifier for the payment.
                          status:
                            type: string
                            description: Status of the payment operation.
              security:
                - CognitoAuthorizer: []
                - api_key: []
                - sigv4: []
              x-amazon-apigateway-request-validators: validateBody
              x-amazon-apigateway-integration:
                type: aws_proxy
                credentials:
                  Fn::GetAtt:
                    - ApiInvokeLambdaRole
                    - Arn
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PaymentFunction.Arn}/invocations
                passthroughBehavior: when_no_match
            options: *a1
        x-amazon-apigateway-request-validators:
          validateBody:
            validateRequestParameters: false
            validateRequestBody: true
          validateParameters:
            validateRequestParameters: true
            validateRequestBody: false
          validateBodyAndParameters:
            validateRequestParameters: true
            validateRequestBody: true
        components:
          securitySchemes:
            CognitoAuthorizer:
              type: apiKey
              in: header
              name: Authorization
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                providerARNs:
                  - arn:aws:cognito-idp:{region}:{account}:userpool/us-west-2_BPOoztfqv
            sigv4:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: awsSigv4
            api_key:
              type: apiKey
              name: x-api-key
              in: header

        ##
        #*End __INCLUDE by scripts/build-template.js
        ##
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            Type: COGNITO_USER_POOLS
            UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/us-west-2_BPOoztfqv

############ VPC  ############
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref PaycodeProxyCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [0, !Cidr [!Ref PaycodeProxyCidrBlock, 2, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [1, !Cidr [!Ref PaycodeProxyCidrBlock, 2, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
  #NOTE: your subnets come with default routing for local traffic. What we do here is create a custom route table and associate the subnets with it. Then we add a route to the peered VPC CIDR block to the custom route table
  CustomRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PeeringConnectionRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref CustomRouteTable
      DestinationCidrBlock: !Ref PaycodeVpcCidr
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref CustomRouteTable

  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref CustomRouteTable

  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref Vpc
      PeerVpcId: !Ref PaycodeVpcId
      PeerOwnerId: !Ref PaycodeAccountId
      PeerRoleArn: !Ref PaycodePcxRoleArn

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Lambda function in VPC
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref PaycodeVpcCidr
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PaycodeVpcCidr


  ############ Lambda functions  ############
  #! no access for lambda:it's stuck in a VPC. If it needs to access the internet, you need to add a NAT Gateway and to access AWS endpoints,  you can use PrivateLinks and VPC endpoints or the internet if available via NGW -> for now, there is no access, and no need for permission (note that the serverless function has a default policy that allows it to push logs )
  BalanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: fn/balance/dist/
      VpcConfig:
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
        SecurityGroupIds:
          - !Ref SecurityGroup

  TransactionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: fn/transaction/dist/
      VpcConfig:
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
        SecurityGroupIds:
          - !Ref SecurityGroup

  PaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: fn/payment/dist/
      VpcConfig:
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
        SecurityGroupIds:
          - !Ref SecurityGroup


 ############ IAM Roles  ############
  ApiInvokeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt BalanceFunction.Arn
                  - !GetAtt TransactionFunction.Arn
                  - !GetAtt PaymentFunction.Arn
        - PolicyName: ApiGatewayCloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  FlowLogRole:
    Type: AWS::IAM::Role
    Condition: IsVpcLog
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "vpc-flow-logs.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: RootPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "logs:CreateLogGroup"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-VPCFlowLogs:*"

  ############ Logs  ############
  VpcFlowLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsVpcLog
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-VPCFlowLogs"
      RetentionInDays:  !Ref VpcLogRetention

  VpcFlowLog:
    Type: AWS::EC2::FlowLog
    Condition: IsVpcLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
      LogGroupName: !Ref VpcFlowLogGroup
      ResourceId: !Ref Vpc
      ResourceType: VPC
      TrafficType: ALL


  ############ API Key  ############
  DevApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    Condition: IsDev
    Properties:
      Name: !Sub '${AWS::StackName}-api-key'
      Description: 'API Key for paycode-proxy API in development only'
      Enabled: true

  ############ API Secrets  ############
  #!removed in favor of internally encrypted env vars for prod

  ############ Outputs ############
  ApiIdParameterStore:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Ref PaycodeProxyApiIdParameterStoreHandle
      Type: 'String'
      Value: !Ref Api

  ApiUrlParameterStore:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Ref PaycodeProxyApiUrlParameterStoreHandle
      Type: 'String'
      Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/dev"

Outputs:
  VpcId:
    Description: "VPC ID"
    Value: !Ref Vpc

  VPCPeeringConnectionId:
    Description: "VPC Peering Connection ID"
    Value: !Ref VPCPeeringConnection

  ExecutionUrl:
    Description: "API Gateway Execution URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/dev"
    Export:
      Name:
        !Sub "${AWS::StackName}-ApiGatewayExecutionUrl"

  ApiId:
    Description: "API Gateway API ID"
    Value: !Ref Api
    Export:
      Name: !Sub "${AWS::StackName}-ApiGatewayApiId"
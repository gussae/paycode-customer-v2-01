# This is the reason why I abandoned implementing the payCodeAPI as data sources (it's just unnecessary abstraction without much value except when you just need to minimize DTO cost by minimizing the back and forth with the backend API or want to leverage a lot of subscriptions to FE ->since I don't see those, I decided to implement these functionalities (minus the Transfer, which is implemented as part of the customer.graphql)as a separate SAM app using REST API than graphQL )
# type Query {
#   generateQRCode: QRCode @function(name: "qrCodeResolver-${env}")
#   getBalance(userId: ID!): Balance @function(name: "balanceResolver-${env}")
#   getTransaction(id: ID!): Transaction
#     @function(name: "transactionResolver-${env}")
#   listTransactions(userId: ID!): [Transaction]
#     @function(name: "transactionResolver-${env}")
#   getDocument(id: ID!): Document @function(name: "documentResolver-${env}")
#   listDocuments(userId: ID!): [Document]
#     @function(name: "documentResolver-${env}")
# }

# type Mutation {
#   createPayment(amount: Float!, method: String!): Payment
#     @function(name: "paymentResolver-${env}")
#   createDocument(url: String!, owner: String!): Document
#     @function(name: "documentResolver-${env}")
#   updateDocument(id: ID!, url: String, owner: String): Document
#     @function(name: "documentResolver-${env}")
#   deleteDocument(id: ID!): Document @function(name: "documentResolver-${env}")
#   transfer(from: ID!, to: ID!, amount: Float!): Transfer
#     @function(name: "transferResolver-${env}")
#   cancelTransfer(transferId: ID!): Transfer
#     @function(name: "transferResolver-${env}")
# }

# type Subscription {
#   onTransferUpdated(transferId: ID!): Transfer
#     @function(name: "transferSubs-${env}")
# the following aren't even part of the requirement and just an example of how to implement subscriptions
#   onDocumentCreated: Document @function(name: "documentSubs-${env}")
#   onDocumentUpdated: Document @function(name: "documentSubs-${env}")
#   onDocumentDeleted: Document @function(name: "documentSubs-${env}")
# }

# type Payment {
#   id: ID!
#   amount: Float!
#   method: String!
#   description: String
#   status: PaymentStatus!
# }

# type QRCode {
#   id: ID!
#   code: String!
#   validUntil: AWSDateTime!
# }

# type Document {
#   id: ID!
#   url: String!
#   owner: String!
#   type: DocumentType!
# }

# type Balance {
#   userId: ID!
#   amount: Float!
#   currency: Currency!
#   lastUpdated: AWSDateTime!
# }

# type Transaction {
#   id: ID!
#   from: ID!
#   to: ID!
#   amount: Float!
#   timestamp: AWSDateTime!
# }

# enum PaymentStatus {
#   COMPLETED
#   REJECTED
#   FAILED
# }

# enum DocumentType {
#   RECEIPT
#   INVOICE
#   CONTRACT
#   STATEMENT
#   OTHER
# }

# enum Currency {
#   CAD
#   USD
# }

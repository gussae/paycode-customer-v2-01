import * as AmazonCognitoIdentity from 'amazon-cognito-identity-js';
import { getProxyApiAdapter } from './cognito-auth-api-adapter';
import * as utils from './utils';
import path from 'path';
const Username = 'behailu.yilma@gmail.com';
const Password = '28x!hMV7SaXc#Nq';
const UserPoolId = 'us-west-2_37luWeyxV';
const ClientId = '7tk0boii48984cjog7pqv8u5vl';
const apiId = 'ut8cv58qie';
process.env.TEST_API_TS_MODULE_PATH = '../client/API.js';
process.env.TEST_API_TS_DIR = './client';
jest.mock('./utils', () => ({
    ...jest.requireActual('./utils'),
    getCurrentUserToken: jest.fn(),
}));
async function signInAndGetToken() {
    const authenticationDetails = new AmazonCognitoIdentity.AuthenticationDetails({
        Username,
        Password,
    });
    const userPool = new AmazonCognitoIdentity.CognitoUserPool({
        UserPoolId,
        ClientId,
    });
    const cognitoUser = new AmazonCognitoIdentity.CognitoUser({
        Username: Username,
        Pool: userPool,
    });
    return new Promise((resolve, reject) => {
        cognitoUser.authenticateUser(authenticationDetails, {
            onSuccess: result => resolve(result.getIdToken().getJwtToken()),
            onFailure: err => reject(err),
        });
    });
}
describe('API Adapter with Authenticated Session', () => {
    beforeAll(async () => {
        const token = await signInAndGetToken();
        utils.getCurrentUserToken.mockImplementation(() => Promise.resolve(token));
    });
    it('should use the authenticated token for API calls', async () => {
        const adapter = await getProxyApiAdapter({
            apiId,
            awsUserPoolsId: UserPoolId,
            awsUserPoolsWebClientId: ClientId,
            apiStageName: 'prod',
            apiWorkspaceRoot: path.resolve(__dirname, '../../../apps/paycode-proxy/'),
            region: 'us-west-2',
        });
        expect(utils.getCurrentUserToken).toHaveBeenCalled();
        adapter
            .getBalance({ username: 'testUserUsername' })
            .then((data) => {
            console.log({ data });
            expect(data).toBeDefined();
            expect(data).toHaveProperty('balance');
            expect(data.balance).toBeInstanceOf(Number);
        })
            .catch(console.error);
    }, 100000);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29nbml0by1hdXRoLWFwaS1hZGFwdGVyLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb2duaXRvLWF1dGgtYXBpLWFkYXB0ZXIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEtBQUsscUJBQXFCLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDaEUsT0FBTyxLQUFLLEtBQUssTUFBTSxTQUFTLENBQUM7QUFDakMsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBSXhCLE1BQU0sUUFBUSxHQUFHLHlCQUF5QixDQUFDO0FBQzNDLE1BQU0sUUFBUSxHQUFHLGlCQUFpQixDQUFDO0FBRW5DLE1BQU0sVUFBVSxHQUFHLHFCQUFxQixDQUFDO0FBQ3pDLE1BQU0sUUFBUSxHQUFHLDRCQUE0QixDQUFDO0FBQzlDLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQztBQUczQixPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixHQUFHLGtCQUFrQixDQUFDO0FBQ3pELE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQztBQUd6QyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQzFCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDaEMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtDQUMvQixDQUFDLENBQUMsQ0FBQztBQUdKLEtBQUssVUFBVSxpQkFBaUI7SUFDOUIsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLHFCQUFxQixDQUFDLHFCQUFxQixDQUMzRTtRQUNFLFFBQVE7UUFDUixRQUFRO0tBQ1QsQ0FDRixDQUFDO0lBRUYsTUFBTSxRQUFRLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxlQUFlLENBQUM7UUFDekQsVUFBVTtRQUNWLFFBQVE7S0FDVCxDQUFDLENBQUM7SUFFSCxNQUFNLFdBQVcsR0FBRyxJQUFJLHFCQUFxQixDQUFDLFdBQVcsQ0FBQztRQUN4RCxRQUFRLEVBQUUsUUFBUTtRQUNsQixJQUFJLEVBQUUsUUFBUTtLQUNmLENBQUMsQ0FBQztJQUVILE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDckMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLHFCQUFxQixFQUFFO1lBQ2xELFNBQVMsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDL0QsU0FBUyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUM5QixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxRQUFRLENBQUMsd0NBQXdDLEVBQUUsR0FBRyxFQUFFO0lBQ3RELFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixNQUFNLEtBQUssR0FBRyxNQUFNLGlCQUFpQixFQUFFLENBQUM7UUFHeEMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxrREFBa0QsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNoRSxNQUFNLE9BQU8sR0FBRyxNQUFNLGtCQUFrQixDQUFDO1lBQ3ZDLEtBQUs7WUFDTCxjQUFjLEVBQUUsVUFBVTtZQUMxQix1QkFBdUIsRUFBRSxRQUFRO1lBQ2pDLFlBQVksRUFBRSxNQUFNO1lBQ3BCLGdCQUFnQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLDhCQUE4QixDQUFDO1lBQ3pFLE1BQU0sRUFBRSxXQUFXO1NBQ3BCLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3JELE9BQU87YUFDSixVQUFVLENBQUMsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQzthQUM1QyxJQUFJLENBQUMsQ0FBQyxJQUFhLEVBQUUsRUFBRTtZQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztZQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN2QyxNQUFNLENBQUUsSUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNiLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuaW1wb3J0ICogYXMgQW1hem9uQ29nbml0b0lkZW50aXR5IGZyb20gJ2FtYXpvbi1jb2duaXRvLWlkZW50aXR5LWpzJztcbmltcG9ydCB7IGdldFByb3h5QXBpQWRhcHRlciB9IGZyb20gJy4vY29nbml0by1hdXRoLWFwaS1hZGFwdGVyJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbi8vIVRPRE8gIFRoaXMgaXMgZmFpbGluZyBiL2Mgb2Ygc29tZSBqZXN0IGNvbmZpZ3VyYXRpb24gaXNzdWUgPT5maXhcbi8vIVRPRE8gUmVtb3ZlIGFmdGVyIHRlc3RcbmNvbnN0IFVzZXJuYW1lID0gJ2JlaGFpbHUueWlsbWFAZ21haWwuY29tJztcbmNvbnN0IFBhc3N3b3JkID0gJzI4eCFoTVY3U2FYYyNOcSc7XG5cbmNvbnN0IFVzZXJQb29sSWQgPSAndXMtd2VzdC0yXzM3bHVXZXl4Vic7XG5jb25zdCBDbGllbnRJZCA9ICc3dGswYm9paTQ4OTg0Y2pvZzdwcXY4dTV2bCc7XG5jb25zdCBhcGlJZCA9ICd1dDhjdjU4cWllJztcblxuLy8hIGplc3QgaGFzIGlzc3VlcyB3aXRoIGR5bmFtaWMgaW1wb3J0cyBmcm9tIE9TIHRlbXAgZm9sZGVyc1xucHJvY2Vzcy5lbnYuVEVTVF9BUElfVFNfTU9EVUxFX1BBVEggPSAnLi4vY2xpZW50L0FQSS5qcyc7XG5wcm9jZXNzLmVudi5URVNUX0FQSV9UU19ESVIgPSAnLi9jbGllbnQnO1xuXG4vLyBKZXN0IHNldHVwIGZvciBtb2NraW5nIGdldEN1cnJlbnRVc2VyVG9rZW5cbmplc3QubW9jaygnLi91dGlscycsICgpID0+ICh7XG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnLi91dGlscycpLFxuICBnZXRDdXJyZW50VXNlclRva2VuOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIEZ1bmN0aW9uIHRvIHNpZ24gaW4gYW5kIGdldCBhIHRva2VuIGZyb20gQ29nbml0b1xuYXN5bmMgZnVuY3Rpb24gc2lnbkluQW5kR2V0VG9rZW4oKSB7XG4gIGNvbnN0IGF1dGhlbnRpY2F0aW9uRGV0YWlscyA9IG5ldyBBbWF6b25Db2duaXRvSWRlbnRpdHkuQXV0aGVudGljYXRpb25EZXRhaWxzKFxuICAgIHtcbiAgICAgIFVzZXJuYW1lLFxuICAgICAgUGFzc3dvcmQsXG4gICAgfSxcbiAgKTtcblxuICBjb25zdCB1c2VyUG9vbCA9IG5ldyBBbWF6b25Db2duaXRvSWRlbnRpdHkuQ29nbml0b1VzZXJQb29sKHtcbiAgICBVc2VyUG9vbElkLFxuICAgIENsaWVudElkLFxuICB9KTtcblxuICBjb25zdCBjb2duaXRvVXNlciA9IG5ldyBBbWF6b25Db2duaXRvSWRlbnRpdHkuQ29nbml0b1VzZXIoe1xuICAgIFVzZXJuYW1lOiBVc2VybmFtZSxcbiAgICBQb29sOiB1c2VyUG9vbCxcbiAgfSk7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb2duaXRvVXNlci5hdXRoZW50aWNhdGVVc2VyKGF1dGhlbnRpY2F0aW9uRGV0YWlscywge1xuICAgICAgb25TdWNjZXNzOiByZXN1bHQgPT4gcmVzb2x2ZShyZXN1bHQuZ2V0SWRUb2tlbigpLmdldEp3dFRva2VuKCkpLFxuICAgICAgb25GYWlsdXJlOiBlcnIgPT4gcmVqZWN0KGVyciksXG4gICAgfSk7XG4gIH0pO1xufVxuXG5kZXNjcmliZSgnQVBJIEFkYXB0ZXIgd2l0aCBBdXRoZW50aWNhdGVkIFNlc3Npb24nLCAoKSA9PiB7XG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdG9rZW4gPSBhd2FpdCBzaWduSW5BbmRHZXRUb2tlbigpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAvL0B0cy1pZ25vcmVcbiAgICB1dGlscy5nZXRDdXJyZW50VXNlclRva2VuLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUodG9rZW4pKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB1c2UgdGhlIGF1dGhlbnRpY2F0ZWQgdG9rZW4gZm9yIEFQSSBjYWxscycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBhZGFwdGVyID0gYXdhaXQgZ2V0UHJveHlBcGlBZGFwdGVyKHtcbiAgICAgIGFwaUlkLFxuICAgICAgYXdzVXNlclBvb2xzSWQ6IFVzZXJQb29sSWQsXG4gICAgICBhd3NVc2VyUG9vbHNXZWJDbGllbnRJZDogQ2xpZW50SWQsXG4gICAgICBhcGlTdGFnZU5hbWU6ICdwcm9kJyxcbiAgICAgIGFwaVdvcmtzcGFjZVJvb3Q6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi8uLi8uLi9hcHBzL3BheWNvZGUtcHJveHkvJyksXG4gICAgICByZWdpb246ICd1cy13ZXN0LTInLFxuICAgIH0pO1xuXG4gICAgZXhwZWN0KHV0aWxzLmdldEN1cnJlbnRVc2VyVG9rZW4pLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBhZGFwdGVyXG4gICAgICAuZ2V0QmFsYW5jZSh7IHVzZXJuYW1lOiAndGVzdFVzZXJVc2VybmFtZScgfSlcbiAgICAgIC50aGVuKChkYXRhOiB1bmtub3duKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHtkYXRhfSk7XG4gICAgICAgIGV4cGVjdChkYXRhKS50b0JlRGVmaW5lZCgpO1xuICAgICAgICBleHBlY3QoZGF0YSkudG9IYXZlUHJvcGVydHkoJ2JhbGFuY2UnKTtcbiAgICAgICAgZXhwZWN0KChkYXRhIGFzIGFueSkuYmFsYW5jZSkudG9CZUluc3RhbmNlT2YoTnVtYmVyKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goY29uc29sZS5lcnJvcik7XG4gIH0sIDEwMDAwMCk7XG59KTtcbiJdfQ==